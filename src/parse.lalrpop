use std::str::FromStr;
use std::string::String;
use std::boxed::Box;
use crate::ast::Ast;
use crate::ast::Operation;
use crate::ast::AstData;
use crate::ast::variable::Variable;
use crate::ast::branch::Branch;
use crate::request::Request;
use std::cell::RefCell;

grammar;

pub Statements: RefCell<Vec<Request>> = {
    <Statement> => RefCell::new(vec![<>]),
    <this:Statements> ";" <s:Statement> => {
        this.borrow_mut().push (s);
        this
    },
    <Statements> ";" => (<>)
}

pub Statement: Request = {
	<Evaluation> => Request::VARIABLE(<>),
    <Print> => Request::PRINT(<>),
    <If> => Request::IF(<>),
	<s:Statement> <c:Comment> => s
}

If: Branch = "if" <cond: Expression> <on_true:Scope> => Branch::new(cond, on_true, None);

IfElse: Branch = "if" <cond: Expression> <on_true:Scope> "else" <on_false:Scope> => Branch::new(cond, on_true, Some(on_false));

Scope: RefCell<Vec<Request>> = "{" <Statements> "}" => <>;

Evaluation: Variable = {
	<id: Identifier> "=" <val: Expression> => Variable::new_boxed(id, val)
}

Print: Box<AstData> = {
	"print" <Expression>
}

Expression: Box<AstData> = {
    Sum,
    Factor,
}

Sum: Box<AstData> = {
    <l:Factor> "+" <r:Factor> => Box::new(Ast::new (l, Operation::ADD, r)),
    <l:Factor> "-" <r:Factor> => Box::new(Ast::new (l, Operation::SUB, r)),
    <l:Sum> "+" <r:Factor> => Box::new(Ast::new (l, Operation::ADD, r)),
    <l:Sum> "-" <r:Factor> => Box::new(Ast::new (l, Operation::SUB, r)),
}

Factor: Box<AstData> = {
    <l:Factor> "*" <r:Term> => Box::new(Ast::new (l, Operation::MUL, r)),
    <l:Factor> "/" <r:Term> => Box::new(Ast::new (l, Operation::DIV, r)),
    Term
}

Term: Box<AstData> = {
    <Num> => Box::new (<>),
    <Identifier> => Box::new(Variable::new_read(<>)),
    "(" <Expression> ")"
}

Num: i32 = r"[0-9]+" => i32::from_str(<>).unwrap();
Identifier: String = r"[A-Za-z_][A-Za-z1-9_]+" => (<>).to_string ();
Comment: () = r"#.+" => ();
